import 'dart:async';

import 'consts.dart';
import 'firebase_database.dart';
import 'push_id_generator.dart';
import 'query.dart';

class DatabaseReference extends Query {
  DatabaseReference(super.database, super.pathSegments);
  DatabaseReference.fromPath(FirebaseDatabase database, String? path):
    super(database, path?.pathSegments() ?? []);

  /// Gets a DatabaseReference for the location at the specified relative
  /// path. The relative path can either be a simple child key (e.g. ‘fred’) or
  /// a deeper slash-separated path (e.g. ‘fred/name/first’).
  DatabaseReference child(String path) {
    final newSegments = path.pathSegments();
    newSegments.insertAll(0, pathSegments);
    return DatabaseReference(database, newSegments);
  }

  /// Gets a DatabaseReference for the parent location. If this instance
  /// refers to the root of your Firebase Database, it has no parent, and
  /// therefore parent() will return null.
  DatabaseReference get parent {
    final withoutLast = pathSegments.getRange(0, pathSegments.length-1);
    return DatabaseReference(database, withoutLast.toList(growable: false));
  }

  /// Gets a [DatabaseReference] for the root location.
  DatabaseReference get root =>
      DatabaseReference(database, []);

  /// Gets the last token in a Firebase Database location (e.g. ‘fred’ in
  /// https://SampleChat.firebaseIO-demo.com/users/fred)
  String get key => pathSegments.last;

  /// Generates a new child location using a unique key and returns a
  /// DatabaseReference to it. This is useful when the children of a Firebase
  /// Database location represent a list of items.
  ///
  /// The unique key generated by childByAutoId: is prefixed with a
  /// client-generated timestamp so that the resulting list will be
  /// chronologically-sorted.
  DatabaseReference push() =>
      child(PushIdGenerator.generatePushChildName());

  /// Write a `value` to the location.
  ///
  /// This will overwrite any data at this location and all child locations.
  ///
  /// Data types that are allowed are String, boolean, int, double, Map, List.
  ///
  /// The effect of the write will be visible immediately and the corresponding
  /// events will be triggered. Synchronization of the data to the Firebase
  /// Database servers will also be started.
  ///
  /// Passing null for the new value means all data at this location or any
  /// child location will be deleted.
  Future<void> set(Object? value) =>
    _put(action: WS.REQUEST_ACTION_PUT, data: value);

  Future<void> _put({
    required String action,
    Object? data,
    String? hash,
  }) async {
    final c = database.connection;
    final payload = {
      WS.REQUEST_PATH: path,
      WS.REQUEST_DATA_PAYLOAD: data,
      if (hash != null)
        WS.REQUEST_DATA_HASH: hash,
    };
    final res = await c.sendRequest(action: action, payload: payload);
    if (res[WS.REQUEST_STATUS] != "ok") {
      throw res;
    }
  }

  /// Returns an [OnDisconnect] instance.
  OnDisconnect onDisconnect() => OnDisconnect(this);

  Future<void> remove() => set(null);

}

class OnDisconnect {
  final DatabaseReference reference;

  OnDisconnect(this.reference);

  /// Ensures the data at this location is set to the specified value when the
  /// client is disconnected (due to closing the browser, navigating to a new
  /// page, or network issues).
  Future<void> set(Object? value) =>
    reference._put(
      action: WS.REQUEST_ACTION_ONDISCONNECT_PUT,
      data: value,
    );

  /// Ensures the data at this location is set with a priority to the specified
  /// value when the client is disconnected (due to closing the browser,
  /// navigating to a new page, or network issues).
  Future<void> setWithPriority(Object? value, Object? priority) {
    throw UnimplementedError("OnDisconnect.setWithPriority");
  }

  /// Ensures the data at this location is deleted when the client is
  /// disconnected (due to closing the browser, navigating to a new page,
  /// or network issues).
  Future<void> remove() => set(null);

  /// Cancels all previously queued onDisconnect() set or update events for
  /// this location and all children.
  Future<void> cancel() =>
    reference._put(action: WS.REQUEST_ACTION_ONDISCONNECT_CANCEL);
}